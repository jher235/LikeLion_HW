API 설계는 다음과 같다.

1. 유저 생성
유저의 email, password, name 정보를 받아 유저 생성
유저 생성이므로 URI는 /users
생성이므로 HTTP 메서드는 POST
2. 유저 정보 수정
RequestHeader로 유저 ID를 받고 RequestBody로 수정할 email, password, name를 받아서 유저 정보 수정
URI는 /users에 HTTP메서드는 PATCH
3. 유저 삭제
RequestHeader로 유저 ID를 받아서 해당 유저 삭제
URI는  /users에 HTTP메서드는 DELETE
4. 유저 로그인
유저의 email과 password를 받아서 로그인
로그인 성공 시 유저의 id반환
 URI는 /users/login에 HTTP메서드는 POST
5. 유저가 메모 작성
RequestHeader로 유저 ID를 받아서 작성자 생성,
작성할 때 보내주는 정보는 title, content를 주도록 한다.
메모 생성이므로 URI는 /memos, 생성이므로 HTTP 메서드는 POST
6. 유저가 자신이 작성한 특정 메모 조회
RequestHeader로 유저 ID를 받아서 작성자와 일치하면 조회 가능
조회이므로 URI는 /memos/{memoId}
조회이므로 HTTP 메서드는 GET
7. 유저가 자신이 작성한 모든 메모 조회
RequestHeader로 유저 ID를 받아서 해당 유저의 모든 메모를 조회
URI는 /memos, 조회이므로 HTTP 메서드는 GET
8. 유저가 자신이 작성한 특정 메모 삭제
RequestHeader로 유저 ID를 받아서 작성자와 동일한 유저일 경우 삭제
특정 메모 삭제이므로 URI는 /memos/{memoId}
삭제이므로 HTTP 메서드는 DELETE
9. 유저가 자신이 작성한 특정 메모 수정
RequestHeader로 유저 ID를 받아서 작성자와 일치할 경우 제목과 내용 수정
특정 메모 수정이므로 URI는 /memos/{memoId}
수정 이므로 HTTP 메서드는 PATCH
10. 유저가 모든 메모에 좋아요와 좋아요 취소 가능
RequestHeader로 유저 ID를 받아서 해당 유저로 특정 메모에 좋아요를 누름. 만일 이미 좋아요를 누른 메모라면 좋아요를 취소한다.
URI는 /memos/{memoId}/like, HTTP메서드는 POST
11. 특정 메모에 좋아요 누른 유저들 조회
특정 메모에 좋아요를 누른 유저 리스트 조회
URI는 /memos/{memoId}/like, HTTP메서드는 GET
12. 유저가 소속된 단체 조회
RequestHeader로 유저 ID를 받아서 해당 유저가 소속된 단체 조회. URI는 users/organization, HTTP 메서드는 GET
13. 단체 생성
단체 이름을 받아와서 단체를 생성
URI는 /organizations, HTTP 메서드는 POST
14. 유저가 단체 가입
RequestHeader로 유저 ID를 받고 PathVariable로 organizationId 받아서 해당 유저로 단체 가입,
URI는 /organizations/{organizationId}, HTTP 메서드는 POST
15. 유저가 단체 탈퇴
RequestHeader로 유저 ID를 받고 PathVariable로 organizationId 받아서 해당 유저로 단체 탈퇴
URI는 /organizations/{organizationId}, HTTP 메서드는 DELETE
16. 단체에 가입된 유저 조회
특정 단체에 가입되어있는 유저 목록 조회
URI는 /organizations/{organizationId}, HTTP 메서드는 GET


